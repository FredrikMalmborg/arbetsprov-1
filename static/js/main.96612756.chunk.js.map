{"version":3,"sources":["redux/actions.ts","posts/Post.tsx","redux/fetchPosts.action.ts","posts/Posts.tsx","components/Btn.tsx","redux/createPost.action.ts","CreatePost.tsx","Header.tsx","redux/deletePost.action.ts","modal/Comments.tsx","modal/User.tsx","modal/Modal.tsx","App.tsx","reportWebVitals.ts","redux/postsReducer.ts","redux/store.ts","index.tsx"],"names":["CREATE_POST_REQUESTS","CREATE_POST_SUCCESS","CREATE_POST_FAILURE","DELETE_POST_REQUESTS","DELETE_POST_SUCCESS","DELETE_POST_FAILURE","FETCH_POSTS_REQUESTS","FETCH_POSTS_SUCCESS","FETCH_POSTS_FAILURE","SHOW_MORE","SET_SHOWCASE","CLOSE_SHOWCASE","postStyle","ID","background","Math","PI","Post","post","dispatch","useDispatch","handleCardClick","a","console","log","type","payload","className","onClick","style","id","title","body","fetchPostsSuccess","posts","fetchPostFaliure","error","Posts","useSelector","state","showing","loading","useEffect","fetch","then","res","json","catch","toString","slice","map","Btn","label","disabled","handleOnClick","opacity","createPostRequest","createPostSuccess","createPostFaliure","CreatePost","useState","values","setValues","handleValueChange","value","anchor","name","placeholder","onChange","e","target","cols","rows","newPost","method","JSON","stringify","userId","round","random","headers","Header","create","setCreate","deletePostRequest","deletePostSuccess","postId","deletePostFaliure","Comments","comments","length","comment","i","email","User","user","username","phone","website","company","bs","catchPhrase","marginTop","borderLeft","Modal","showcase","closeModal","handleDeletePost","deletePost","setUser","setComments","fetchUser","url","u","fetchComments","c","stopPropagation","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","store","createStore","action","copy","deleteId","findIndex","p","splice","applyMiddleware","ThunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mWAAMA,EAAuB,uBACvBC,EAAsB,sBACtBC,EAAsB,sBAEtBC,EAAuB,uBACvBC,EAAsB,sBACtBC,EAAsB,sBAEtBC,EAAuB,uBACvBC,EAAsB,sBACtBC,EAAsB,sBACtBC,EAAY,YAEZC,EAAe,eACfC,EAAiB,iB,OCiBjBC,EAAY,SAACC,GACf,MAAO,CACHC,WAAW,OAAD,OAASD,EAAKE,KAAKC,GAAnB,iBAIHC,EA5BF,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KAGNC,EAAWC,cAEXC,EAAe,uCAAG,sBAAAC,EAAA,sDACpBC,QAAQC,IAAI,QAEZL,EAAS,CACLM,KAAMf,EACNgB,QAASR,IALO,2CAAH,qDASrB,OACI,sBAAKS,UAAU,OAAOC,QAAS,kBAAMP,KAAmBQ,MAAOjB,EAAUM,EAAKY,IAA9E,UACI,oBAAIH,UAAU,QAAd,SAAuBT,EAAKa,QAC5B,oBAAGJ,UAAU,OAAb,cAAsBT,EAAKc,YCdjCC,EAAoB,SAACC,GACvB,MAAO,CACHT,KAAMlB,EACNmB,QAASQ,IAGXC,EAAmB,SAACC,GACtB,MAAO,CACHX,KAAMjB,EACNkB,QAASU,ICOFC,EApBD,WAEV,IAAMlB,EAAWC,cACjB,EAAoCkB,aAAoC,SAACC,GAAD,OAAWA,KAA3EL,EAAR,EAAQA,MAAOM,EAAf,EAAeA,QAASC,EAAxB,EAAwBA,QAOxB,OALAC,qBAAU,WACNvB,EDaJ,uCAAO,WAAgBA,GAAhB,SAAAG,EAAA,6DACHC,QAAQC,IAAI,SACZL,EArBG,CACHM,KAAMnB,IAkBH,SAIGqC,MAAM,8CACPC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAV,GAEFf,EAASc,EAAkBC,OAE9Ba,OAAM,SAAAX,GACHjB,EAASgB,EAAiBC,EAAMY,gBAXrC,2CAAP,yDCZG,CAAC7B,IAEJI,QAAQC,IAAIU,GAER,qBAAKP,UAAU,cAAf,UACMc,GAAWP,EAAMe,MAAM,EAAGT,GAASU,KACjC,SAAChC,GAAD,OAAiB,cAAC,EAAD,CAAyBA,KAAMA,GAA/B,UAAcA,EAAKY,W,MCZrC,SAASqB,EAAT,GAAmE,IAApDC,EAAmD,EAAnDA,MAAmD,IAA5C3B,YAA4C,MAArC,QAAqC,EAA5BG,EAA4B,EAA5BA,QAASyB,EAAmB,EAAnBA,SAEpDC,EAAgB,kBAAOD,GAAYzB,KAEzC,MAAa,WAATH,EACA,sBAAME,UAAU,MAAMC,QAAS0B,EAAezB,MAAO,CAAE0B,QAASF,EAAW,KAAO,KAAlF,SACKD,IAIL,qBAAKzB,UAAU,MAAMC,QAAS0B,EAAezB,MAAO,CAAE0B,QAASF,EAAW,KAAO,KAAjF,SACKD,I,0BCYPI,EAAoB,WACtB,MAAO,CACH/B,KAAMzB,IAGRyD,EAAoB,SAACvC,GAGvB,OAFAK,QAAQC,IAAI,WAAYN,GAEjB,CACHO,KAAMxB,EACNyB,QAASR,IAGXwC,EAAoB,SAACtB,GACvB,MAAO,CACHX,KAAMvB,EACNwB,QAASU,ICiBFuB,G,MA1DI,WAGf,IAAMxC,EAAWC,cAEjB,EAA4BwC,mBAAS,CACjC7B,MAAO,GACPC,KAAM,KAFV,mBAAO6B,EAAP,KAAeC,EAAf,KAKMC,EAAoB,SAACC,EAAeC,GACtCH,EAAU,2BACHD,GADE,kBAEJI,EAASD,MAmBlB,OACI,sBAAKrC,UAAU,iBAAf,UAEI,uBACIF,KAAK,OACLE,UAAU,QACVuC,KAAK,QACLC,YAAY,QACZH,MAAOH,EAAO9B,MACdqC,SAAU,SAACC,GAAD,OAAON,EAAkBM,EAAEC,OAAON,MAAO,YACvD,0BACIE,KAAK,OACLvC,UAAU,OACVwC,YAAY,UACZI,KAAM,GACNC,KAAM,GACNR,MAAOH,EAAO7B,KACdoC,SAAU,SAACC,GAAD,OAAON,EAAkBM,EAAEC,OAAON,MAAO,WAEvD,qBAAKrC,UAAU,SAAf,SACI,cAACwB,EAAD,CAAKC,MAAM,OAAOxB,QA9BJ,WD1BJ,IAAC6C,EC4BnBtD,GD5BmBsD,EC4BC,CAChB1C,MAAO8B,EAAO9B,MACdC,KAAM6B,EAAO7B,MD5BrB,uCAAO,WAAgBb,GAAhB,iBAAAG,EAAA,6DACHC,QAAQC,IAAI,UACJQ,EAAgByC,EAAhBzC,KAAMD,EAAU0C,EAAV1C,MACdZ,EAASqC,KAHN,SAKGb,MAAM,6CAA8C,CACtD+B,OAAQ,OACR1C,KAAM2C,KAAKC,UAAU,CACjB7C,QACAC,OACA6C,OAAQ9D,KAAK+D,MAAsB,GAAhB/D,KAAKgE,YAE5BC,QAAS,CACL,eAAgB,qCAGnBpC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAA1B,GACFK,QAAQC,IAAI,UAAWN,GAEvBC,EAASsC,EAAkBvC,OAE9B6B,OAAM,SAAAX,GACHjB,EAASuC,EAAkBtB,EAAMY,gBAvBtC,2CAAP,wDCmB0Bc,EAAU,CAChC/B,MAAO,GACPC,KAAM,MAiCgDqB,SAA0B,KAAhBQ,EAAO7B,MAAgC,KAAjB6B,EAAO9B,e,MCvDtF,SAASkD,IAEpB,MAA4BrB,oBAAkB,GAA9C,mBAAOsB,EAAP,KAAeC,EAAf,KAIA,OACI,mCACI,8BACI,qBAAIxD,UAAWuD,EAAS,WAAa,GAArC,mBACU,cAAC/B,EAAD,CAAKC,MAAO8B,EAAS,IAAM,IAAKtD,QANhC,kBAAMuD,GAAWD,IAMuCzD,KAAK,gBAK1EyD,GAAU,cAAC,EAAD,OChBhB,IAiBDE,EAAoB,WACtB,MAAO,CACH3D,KAAMtB,IAGRkF,EAAoB,SAACC,GACvB,MAAO,CACH7D,KAAMrB,EACNsB,QAAS4D,IAGXC,EAAoB,SAACnD,GACvB,MAAO,CACHX,KAAMpB,EACNqB,QAASU,ICHFoD,G,MAvBE,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAChB,OACI,qCACI,yCACA,uBACA,qBAAK9D,UAAU,WAAf,SACK8D,EAASC,OAAS,EAAID,EAASvC,KAAI,SAACyC,EAASC,GAAV,OAChC,gCACI,+BACKD,EAAQzB,KACT,uBAFJ,MAGO,6BAAKyB,EAAQE,WAGpB,4BACKF,EAAQ3D,SARP4D,EAAID,EAAQL,WAWpB,qBCkCPQ,EArDF,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KAEZ,OACI,sBAAKpE,UAAU,eAAf,UACI,qBAAKA,UAAU,iBAEf,sBAAKA,UAAU,YAAf,UACI,+BAEI,0CAGK,OAAJoE,QAAI,IAAJA,OAAA,EAAAA,EAAMC,WAAY,aAEvB,8BACI,2CAGK,OAAJD,QAAI,IAAJA,OAAA,EAAAA,EAAMF,QAAS,aAEpB,8BACI,2CAGK,OAAJE,QAAI,IAAJA,OAAA,EAAAA,EAAME,QAAS,aAEpB,8BACI,6CAGK,OAAJF,QAAI,IAAJA,OAAA,EAAAA,EAAMG,UAAW,aAEtB,8BACI,6CAGK,OAAJH,QAAI,IAAJA,OAAA,EAAAA,EAAMI,SACH,qCACKJ,EAAKI,QAAQjC,KAAO,MAAQ6B,EAAKI,QAAQC,GAC1C,6BACK,MAAQL,EAAKI,QAAQE,YAAc,SAG1C,aAIV,oBAAIxE,MAAO,CAAEyE,UAAW,gBCuBlCzE,EAAQ,SAAChB,GACX,MAAO,CACH0F,WAAW,iBAAD,OAAmB1F,EAAKE,KAAKC,GAA7B,iBAIHwF,EAzED,WAEV,IAAMrF,EAAWC,cACXqF,EAAWnE,aAAsC,SAACC,GAAD,OAAWA,EAAMkE,YAElEC,EAAa,kBAAMvF,EAAS,CAAEM,KAAMd,KAEpCgG,EAAmB,SAACrB,GACtB/D,QAAQC,IAAI,cACZL,EHhBkB,SAACmE,GAEvB,8CAAO,WAAgBnE,GAAhB,SAAAG,EAAA,6DACHC,QAAQC,IAAI,UACZL,EAASiE,KAFN,SAGGzC,MAAM,8CAAD,OAA+C2C,GAAU,CAChEZ,OAAQ,WACT9B,MAAK,SAACC,GAAD,OAASA,EAAIC,UAChBF,MAAK,SAAA1B,GACFC,EAASkE,EAAkBC,OAE9BvC,OAAM,SAAAX,GACHjB,EAASoE,EAAkBnD,EAAMY,gBAVtC,2CAAP,sDGca4D,CAAWtB,IACpBoB,KAKJ,EAAwB9C,mBAAuB,MAA/C,mBAAOmC,EAAP,KAAac,EAAb,KACA,EAAgCjD,mBAAoB,IAApD,mBAAO6B,EAAP,KAAiBqB,EAAjB,KA2BA,OAxBApE,qBAAU,WACN,IAAMqE,EAAS,uCAAG,4BAAAzF,EAAA,6DACR0F,EADQ,4DAC4CP,QAD5C,IAC4CA,OAD5C,EAC4CA,EAAU3E,IADtD,SAERa,MAAMqE,GACPpE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAqE,GACF1F,QAAQC,IAAI,MAAOyF,GACnBJ,EAAQI,MANF,2CAAH,qDAUTC,EAAa,uCAAG,4BAAA5F,EAAA,6DACZ0F,EADY,4DACwCP,QADxC,IACwCA,OADxC,EACwCA,EAAU3E,GADlD,sBAEZa,MAAMqE,GACPpE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAuE,GAAC,OAAIL,EAAYK,MAJT,2CAAH,qDAMfV,IACAM,IACAG,OAGL,CAACT,IAGAA,EACI,qBAAK9E,UAAU,gBAAgBC,QAAS,kBAAM8E,KAA9C,SACI,0BAAS7E,MAAOA,EAAM4E,EAAS3E,IAAKF,QAAS,SAACyC,GAAD,OAAOA,EAAE+C,mBAAtD,UAEI,cAAC,EAAD,CAAMrB,KAAMA,IAEZ,sBAAKpE,UAAU,gBAAf,UACI,6BAAK8E,EAAS1E,QACd,kCAAK0E,EAASzE,KAAOyE,EAASzE,KAAOyE,EAASzE,KAA9C,UAIJ,cAAC,EAAD,CAAUyD,SAAUA,IAEpB,qBAAK9D,UAAU,aAAaC,QAAS,kBAAM+E,EAAiBF,EAAS3E,KAArE,8BAKN,8BChDCuF,MAlBf,WAEE,IAAMlG,EAAWC,cAGjB,OACE,iCACE,cAAC6D,EAAD,IAEA,cAAC,EAAD,IAEA,cAAC,EAAD,IAEA,cAAC9B,EAAD,CAAKC,MAAM,YAAYxB,QAVV,kBAAMT,EAAS,CAAEM,KAAM,eAUMA,KAAK,cCNtC6F,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB5E,MAAK,YAAkD,IAA/C6E,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,wBCQRO,EAAgB,CAClBrF,SAAS,EACTP,MAAO,GACPuE,SAAU,KACVjE,QAAS,GACTJ,MAAO,IClBE2F,EAAQC,aDqBO,WAAwD,IAAvDzF,EAAsD,uDAAlCuF,EAAeG,EAAmB,uCAC/E,OAAQA,EAAOxG,MAEX,KAAKnB,EACD,OAAO,2BACAiC,GADP,IAEIE,SAAS,IAGjB,KAAKlC,EACD,OAAO,2BACAgC,GADP,IAEIE,SAAS,EACTP,MAAO+F,EAAOvG,QACdU,MAAO,KAGf,KAAK5B,EACD,OAAO,2BACA+B,GADP,IAEIE,SAAS,EACTP,MAAO,GACPE,MAAO6F,EAAOvG,UAKtB,KAAK1B,EACD,OAAO,2BACAuC,GADP,IAEIE,SAAS,IAGjB,KAAKxC,EACD,OAAO,2BACAsC,GADP,IAEIE,SAAS,EACTP,MAAM,CAAE+F,EAAOvG,SAAV,mBAAsBa,EAAML,QACjCE,MAAO,KAGf,KAAKlC,EACD,OAAO,2BACAqC,GADP,IAEIE,SAAS,EACTL,MAAO6F,EAAOvG,UAMtB,KAAKvB,EACD,OAAO,2BACAoC,GADP,IAEIE,SAAS,IAGjB,KAAKrC,EAED,IAAM8H,EAAI,YAAO3F,EAAML,OACjBiG,EAAWD,EAAKE,WAAU,SAACC,GAAD,OAAOA,EAAEvG,KAAOmG,EAAOvG,WAIvD,OAFAwG,EAAKI,OAAOH,EAAU,GAEf,2BACA5F,GADP,IAEIE,SAAS,EACTP,MAAOgG,EACP9F,MAAO,KAGf,KAAK/B,EACD,OAAO,2BACAkC,GADP,IAEIE,SAAS,EACTL,MAAO6F,EAAOvG,UAMtB,KAAKhB,EACD,OAAO,2BACA6B,GADP,IAEIkE,SAAUwB,EAAOvG,UAGzB,KAAKf,EACD,OAAO,2BACA4B,GADP,IAEIkE,SAAU,OAGlB,KAAKhG,EACD,OAAO,2BACA8B,GADP,IAEIC,QAASD,EAAMC,QAAU,KAIjC,QAAS,OAAOD,KCzHuBgG,YAAgBC,MCI/DC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUZ,MAAOA,EAAjB,SACA,cAAC,EAAD,QAGFa,SAASC,eAAe,SAM1BvB,M","file":"static/js/main.96612756.chunk.js","sourcesContent":["const CREATE_POST_REQUESTS = 'CREATE_POST_REQUESTS'\r\nconst CREATE_POST_SUCCESS = 'CREATE_POST_SUCCESS'\r\nconst CREATE_POST_FAILURE = 'CREATE_POST_FAILURE'\r\n\r\nconst DELETE_POST_REQUESTS = 'DELETE_POST_REQUESTS'\r\nconst DELETE_POST_SUCCESS = 'DELETE_POST_SUCCESS'\r\nconst DELETE_POST_FAILURE = 'DELETE_POST_FAILURE'\r\n\r\nconst FETCH_POSTS_REQUESTS = 'FETCH_POSTS_REQUESTS'\r\nconst FETCH_POSTS_SUCCESS = 'FETCH_POSTS_SUCCESS'\r\nconst FETCH_POSTS_FAILURE = 'FETCH_POSTS_FAILURE'\r\nconst SHOW_MORE = 'SHOW_MORE'\r\n\r\nconst SET_SHOWCASE = 'SET_SHOWCASE'\r\nconst CLOSE_SHOWCASE = 'CLOSE_SHOWCASE'\r\n\r\n\r\nexport {\r\n    CREATE_POST_REQUESTS,\r\n    CREATE_POST_SUCCESS,\r\n    CREATE_POST_FAILURE,\r\n\r\n    DELETE_POST_REQUESTS,\r\n    DELETE_POST_SUCCESS,\r\n    DELETE_POST_FAILURE,\r\n\r\n    FETCH_POSTS_REQUESTS,\r\n    FETCH_POSTS_SUCCESS,\r\n    FETCH_POSTS_FAILURE,\r\n    SHOW_MORE,\r\n\r\n    SET_SHOWCASE,\r\n    CLOSE_SHOWCASE\r\n}\r\n","import { CSSProperties } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { TPost } from '../../types/types'\r\nimport { SET_SHOWCASE } from '../redux/actions';\r\n\r\ninterface Props {\r\n    post: TPost\r\n}\r\n\r\nconst Post = ({ post }: Props) => {\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handleCardClick = async () => {\r\n        console.log(\"OPEN\");\r\n\r\n        dispatch({\r\n            type: SET_SHOWCASE,\r\n            payload: post\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"post\" onClick={() => handleCardClick()} style={postStyle(post.id)}>\r\n            <h3 className=\"title\">{post.title}</h3>\r\n            <p className=\"body\"> {post.body}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst postStyle = (ID: number): CSSProperties => {\r\n    return {\r\n        background: `hsl(${ID * Math.PI}, 42%, 60%)`\r\n    }\r\n}\r\n\r\nexport default Post\r\n","import { Action, TPost } from '../../types/types'\r\nimport {\r\n    FETCH_POSTS_REQUESTS,\r\n    FETCH_POSTS_SUCCESS,\r\n    FETCH_POSTS_FAILURE\r\n} from './actions'\r\n\r\nconst fetchPostsRequest = (): Action => {\r\n    return {\r\n        type: FETCH_POSTS_REQUESTS\r\n    }\r\n}\r\nconst fetchPostsSuccess = (posts: TPost[]): Action => {\r\n    return {\r\n        type: FETCH_POSTS_SUCCESS,\r\n        payload: posts\r\n    }\r\n}\r\nconst fetchPostFaliure = (error: string): Action => {\r\n    return {\r\n        type: FETCH_POSTS_FAILURE,\r\n        payload: error\r\n    }\r\n}\r\n\r\nexport const fetchPosts = () => {\r\n\r\n    return async function (dispatch: any) {\r\n        console.log(\"FETCH\");\r\n        dispatch(fetchPostsRequest())\r\n\r\n        await fetch('https://jsonplaceholder.typicode.com/posts')\r\n            .then(res => res.json())\r\n            .then(posts => {\r\n\r\n                dispatch(fetchPostsSuccess(posts))\r\n            })\r\n            .catch(error => {\r\n                dispatch(fetchPostFaliure(error.toString()))\r\n            })\r\n\r\n\r\n    }\r\n}\r\n","import { useEffect } from 'react'\r\n\r\nimport \"./Posts.style.css\"\r\nimport { TPost, PostsState } from '../../types/types'\r\nimport Post from './Post'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { fetchPosts } from '../redux/fetchPosts.action'\r\n\r\nconst Posts = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const { posts, showing, loading } = useSelector<PostsState, PostsState>((state) => state)\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchPosts())\r\n    }, [dispatch])\r\n\r\n    console.log(posts)\r\n    return (\r\n        <div className=\"postWrapper\">\r\n            {!loading && posts.slice(0, showing).map(\r\n                (post: TPost) => <Post key={`${post.id}`} post={post} />)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Posts\r\n","import './Btn.style.css'\r\n\r\ninterface Props {\r\n    label: string,\r\n    type?: \"inline\" | \"block\"\r\n    disabled?: boolean\r\n    onClick: () => any\r\n}\r\n\r\nexport default function Btn({ label, type = \"block\", onClick, disabled }: Props) {\r\n\r\n    const handleOnClick = () => !disabled && onClick()\r\n\r\n    if (type === \"inline\") return (\r\n        <span className=\"btn\" onClick={handleOnClick} style={{ opacity: disabled ? \".3\" : \"1\" }}>\r\n            {label}\r\n        </span>)\r\n\r\n    return (\r\n        <div className=\"btn\" onClick={handleOnClick} style={{ opacity: disabled ? \".3\" : \"1\" }}>\r\n            {label}\r\n        </div>\r\n    )\r\n}\r\n","import { Action, TPost } from \"../../types/types\";\r\nimport { CREATE_POST_FAILURE, CREATE_POST_REQUESTS, CREATE_POST_SUCCESS } from \"./actions\";\r\n\r\nexport const createPost = (newPost: { title: string, body: string }) => {\r\n\r\n    return async function (dispatch: any) {\r\n        console.log(\"CREATE\");\r\n        const { body, title } = newPost\r\n        dispatch(createPostRequest())\r\n\r\n        await fetch('https://jsonplaceholder.typicode.com/posts', {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                title,\r\n                body,\r\n                userId: Math.round(Math.random() * 50),\r\n            }),\r\n            headers: {\r\n                'Content-type': 'application/json; charset=UTF-8',\r\n            },\r\n        })\r\n            .then((res) => res.json())\r\n            .then(post => {\r\n                console.log(\"SUCCESS\", post);\r\n\r\n                dispatch(createPostSuccess(post))\r\n            })\r\n            .catch(error => {\r\n                dispatch(createPostFaliure(error.toString()))\r\n            })\r\n    }\r\n}\r\nconst createPostRequest = (): Action => {\r\n    return {\r\n        type: CREATE_POST_REQUESTS\r\n    }\r\n}\r\nconst createPostSuccess = (post: TPost): Action => {\r\n    console.log(\"new post\", post);\r\n\r\n    return {\r\n        type: CREATE_POST_SUCCESS,\r\n        payload: post\r\n    }\r\n}\r\nconst createPostFaliure = (error: string): Action => {\r\n    return {\r\n        type: CREATE_POST_FAILURE,\r\n        payload: error\r\n    }\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { createPost } from './redux/createPost.action'\r\nimport Btn from './components/Btn'\r\nimport './CreatePost.style.css'\r\nimport './posts/Posts.style.css'\r\n\r\nconst CreatePost = () => {\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [values, setValues] = useState({\r\n        title: '',\r\n        body: ''\r\n    })\r\n\r\n    const handleValueChange = (value: string, anchor: string) => {\r\n        setValues({\r\n            ...values,\r\n            [anchor]: value\r\n        })\r\n    }\r\n\r\n    const clearValues = () => setValues({\r\n        title: '',\r\n        body: ''\r\n    })\r\n\r\n    const handlePostNewPost = () => {\r\n\r\n        dispatch(createPost({\r\n            title: values.title,\r\n            body: values.body\r\n        }))\r\n\r\n        clearValues()\r\n    }\r\n\r\n    return (\r\n        <div className=\"form_container\">\r\n\r\n            <input\r\n                type=\"text\"\r\n                className=\"title\"\r\n                name=\"title\"\r\n                placeholder=\"Title\"\r\n                value={values.title}\r\n                onChange={(e) => handleValueChange(e.target.value, \"title\")} />\r\n            <textarea\r\n                name=\"body\"\r\n                className=\"body\"\r\n                placeholder=\"content\"\r\n                cols={40}\r\n                rows={12}\r\n                value={values.body}\r\n                onChange={(e) => handleValueChange(e.target.value, \"body\")} />\r\n\r\n            <div className=\"button\">\r\n                <Btn label=\"SEND\" onClick={handlePostNewPost} disabled={values.body === \"\" || values.title === \"\"} />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default CreatePost\r\n","import { useState } from 'react'\r\nimport Btn from './components/Btn'\r\nimport CreatePost from './CreatePost'\r\nimport './Header.style.css'\r\nexport default function Header() {\r\n\r\n    const [create, setCreate] = useState<boolean>(false)\r\n\r\n    const handleOnClick = () => setCreate(!create)\r\n\r\n    return (\r\n        <header>\r\n            <div>\r\n                <h1 className={create ? \"creating\" : \"\"}>\r\n                    POSTS <Btn label={create ? '-' : '+'} onClick={handleOnClick} type=\"inline\" />\r\n                </h1>\r\n            </div>\r\n\r\n\r\n            {create && <CreatePost />}\r\n        </header>\r\n\r\n    )\r\n}\r\n","import { Action, TPost } from \"../../types/types\";\r\nimport { DELETE_POST_FAILURE, DELETE_POST_REQUESTS, DELETE_POST_SUCCESS } from \"./actions\";\r\n\r\nexport const deletePost = (postId: number) => {\r\n\r\n    return async function (dispatch: any) {\r\n        console.log(\"DELETE\");\r\n        dispatch(deletePostRequest())\r\n        await fetch(`https://jsonplaceholder.typicode.com/posts/${postId}`, {\r\n            method: 'DELETE',\r\n        }).then((res) => res.json())\r\n            .then(post => {\r\n                dispatch(deletePostSuccess(postId))\r\n            })\r\n            .catch(error => {\r\n                dispatch(deletePostFaliure(error.toString()))\r\n            })\r\n    }\r\n\r\n}\r\nconst deletePostRequest = (): Action => {\r\n    return {\r\n        type: DELETE_POST_REQUESTS\r\n    }\r\n}\r\nconst deletePostSuccess = (postId: number): Action => {\r\n    return {\r\n        type: DELETE_POST_SUCCESS,\r\n        payload: postId\r\n    }\r\n}\r\nconst deletePostFaliure = (error: string): Action => {\r\n    return {\r\n        type: DELETE_POST_FAILURE,\r\n        payload: error\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nimport { Comment } from '../../types/types'\r\n\r\ninterface Props {\r\n    comments: Comment[]\r\n}\r\n\r\nconst Comments = ({ comments }: Props) => {\r\n    return (\r\n        <>\r\n            <p>Comments</p>\r\n            <hr />\r\n            <div className=\"comments\">\r\n                {comments.length > 0 ? comments.map((comment, i) =>\r\n                    <div key={i + comment.postId}>\r\n                        <h5>\r\n                            {comment.name}\r\n                            <br />\r\n                            by <em>{comment.email}</em>\r\n                        </h5>\r\n\r\n                        <p>\r\n                            {comment.body}\r\n                        </p>\r\n                    </div>)\r\n                    : \"no comments\"}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Comments\r\n","import React from 'react'\r\nimport { User as TUser } from '../../types/types'\r\n\r\ninterface Props {\r\n    user: TUser | null\r\n}\r\n\r\nconst User = ({ user }: Props) => {\r\n\r\n    return (\r\n        <div className=\"user_wrapper\">\r\n            <div className=\"user_profile\" />\r\n\r\n            <div className=\"user_info\">\r\n                <h4>\r\n\r\n                    <span>\r\n                        user:\r\n                    </span>\r\n                    {user?.username || \"unknown\"}\r\n                </h4>\r\n                <p>\r\n                    <span>\r\n                        email:\r\n                    </span>\r\n                    {user?.email || \"unknown\"}\r\n                </p>\r\n                <p>\r\n                    <span>\r\n                        phone:\r\n                    </span>\r\n                    {user?.phone || \"unknown\"}\r\n                </p>\r\n                <p>\r\n                    <span>\r\n                        website:\r\n                    </span>\r\n                    {user?.website || \"unknown\"}\r\n                </p>\r\n                <p>\r\n                    <span>\r\n                        company:\r\n                    </span>\r\n                    {user?.company ?\r\n                        <>\r\n                            {user.company.name + \" | \" + user.company.bs}\r\n                            <em>\r\n                                {' -\"' + user.company.catchPhrase + '\"'}\r\n                            </em>\r\n                        </>\r\n                        : \"unknown\"\r\n                    }\r\n                </p>\r\n\r\n                <hr style={{ marginTop: '1em' }} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User\r\n","import { CSSProperties, useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { PostsState, TPost, Comment, User as TUser } from '../../types/types'\r\nimport { CLOSE_SHOWCASE } from '../redux/actions'\r\nimport { deletePost } from '../redux/deletePost.action'\r\nimport './Modal.style.css'\r\n\r\nimport Comments from './Comments'\r\nimport User from './User'\r\n\r\nconst Modal = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const showcase = useSelector<PostsState, TPost | null>((state) => state.showcase)\r\n\r\n    const closeModal = () => dispatch({ type: CLOSE_SHOWCASE })\r\n\r\n    const handleDeletePost = (postId: number) => {\r\n        console.log(\"deletePost\");\r\n        dispatch(deletePost(postId))\r\n        closeModal()\r\n    }\r\n\r\n\r\n\r\n    const [user, setUser] = useState<TUser | null>(null)\r\n    const [comments, setComments] = useState<Comment[]>([])\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchUser = async () => {\r\n            const url = `https://jsonplaceholder.typicode.com/users/${showcase?.id}`\r\n            await fetch(url)\r\n                .then(res => res.json())\r\n                .then(u => {\r\n                    console.log('USE', u);\r\n                    setUser(u)\r\n                })\r\n\r\n        }\r\n        const fetchComments = async () => {\r\n            const url = `https://jsonplaceholder.typicode.com/posts/${showcase?.id}/comments`\r\n            await fetch(url)\r\n                .then(res => res.json())\r\n                .then(c => setComments(c))\r\n        }\r\n        if (showcase) {\r\n            fetchUser()\r\n            fetchComments()\r\n        }\r\n\r\n    }, [showcase])\r\n\r\n    return (\r\n        showcase ?\r\n            <div className=\"modal_wrapper\" onClick={() => closeModal()}>\r\n                <article style={style(showcase.id)} onClick={(e) => e.stopPropagation()}>\r\n\r\n                    <User user={user} />\r\n\r\n                    <div className=\"modal_content\">\r\n                        <h3>{showcase.title}</h3>\r\n                        <p> {showcase.body + showcase.body + showcase.body} </p>\r\n                    </div>\r\n\r\n\r\n                    <Comments comments={comments} />\r\n\r\n                    <div className=\"delete_btn\" onClick={() => handleDeletePost(showcase.id)}>\r\n                        delete post\r\n                    </div>\r\n                </article>\r\n            </div>\r\n            : <></>\r\n    )\r\n}\r\n\r\nconst style = (ID: number): CSSProperties => {\r\n    return {\r\n        borderLeft: `1em solid hsl(${ID * Math.PI}, 42%, 60%)`\r\n    }\r\n}\r\n\r\nexport default Modal\r\n","import \"./App.style.css\"\r\nimport Posts from './posts/Posts'\r\nimport Btn from './components/Btn'\r\nimport Header from './Header'\r\nimport Modal from './modal/Modal'\r\nimport { useDispatch } from \"react-redux\"\r\n\r\nfunction App() {\r\n\r\n  const dispatch = useDispatch()\r\n  const showMore = () => dispatch({ type: \"SHOW_MORE\" })\r\n\r\n  return (\r\n    <main>\r\n      <Header />\r\n\r\n      <Posts />\r\n\r\n      <Modal />\r\n\r\n      <Btn label=\"show more\" onClick={showMore} type=\"block\" />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { PostsState, Action } from '../../types/types'\r\nimport {\r\n    FETCH_POSTS_REQUESTS,\r\n    FETCH_POSTS_SUCCESS,\r\n    FETCH_POSTS_FAILURE,\r\n    SHOW_MORE,\r\n    SET_SHOWCASE,\r\n    CLOSE_SHOWCASE,\r\n    CREATE_POST_FAILURE,\r\n    CREATE_POST_SUCCESS,\r\n    CREATE_POST_REQUESTS,\r\n    DELETE_POST_SUCCESS,\r\n    DELETE_POST_REQUESTS,\r\n    DELETE_POST_FAILURE\r\n} from './actions'\r\n\r\n\r\nconst INITIAL_STATE = {\r\n    loading: false,\r\n    posts: [],\r\n    showcase: null,\r\n    showing: 10,\r\n    error: ''\r\n}\r\n\r\nexport const postsReducer = (state: PostsState = INITIAL_STATE, action: Action) => {\r\n    switch (action.type) {\r\n        // FETCH ---------------------\r\n        case FETCH_POSTS_REQUESTS: {\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        }\r\n        case FETCH_POSTS_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                posts: action.payload,\r\n                error: ''\r\n            }\r\n        }\r\n        case FETCH_POSTS_FAILURE: {\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                posts: [],\r\n                error: action.payload\r\n            }\r\n        }\r\n\r\n        // CREATE ---------------------\r\n        case CREATE_POST_REQUESTS: {\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        }\r\n        case CREATE_POST_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                posts: [action.payload, ...state.posts],\r\n                error: ''\r\n            }\r\n        }\r\n        case CREATE_POST_FAILURE: {\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        }\r\n\r\n\r\n        // DELETE ---------------------\r\n        case DELETE_POST_REQUESTS: {\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        }\r\n        case DELETE_POST_SUCCESS: {\r\n\r\n            const copy = [...state.posts]\r\n            const deleteId = copy.findIndex((p) => p.id === action.payload)\r\n\r\n            copy.splice(deleteId, 1)\r\n\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                posts: copy,\r\n                error: ''\r\n            }\r\n        }\r\n        case DELETE_POST_FAILURE: {\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload\r\n            }\r\n        }\r\n\r\n\r\n\r\n        case SET_SHOWCASE: {\r\n            return {\r\n                ...state,\r\n                showcase: action.payload\r\n            }\r\n        }\r\n        case CLOSE_SHOWCASE: {\r\n            return {\r\n                ...state,\r\n                showcase: null\r\n            }\r\n        }\r\n        case SHOW_MORE: {\r\n            return {\r\n                ...state,\r\n                showing: state.showing + 10\r\n            }\r\n        }\r\n\r\n        default: return state\r\n    }\r\n}\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport ThunkMiddleware from 'redux-thunk'\r\nimport { postsReducer } from './postsReducer'\r\n\r\nexport const store = createStore(postsReducer, applyMiddleware(ThunkMiddleware))\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.style.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider} from 'react-redux'\r\nimport {store} from './redux/store'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n    <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}